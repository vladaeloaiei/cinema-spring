/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ltw.cinema.gui.casier;

import com.ltw.cinema.api.dto.BookingDto;
import com.ltw.cinema.api.dto.MovieDetailDto;
import com.ltw.cinema.api.dto.MovieDto;
import com.ltw.cinema.api.dto.ScheduleDto;
import com.ltw.cinema.api.feign.BookingClient;
import com.ltw.cinema.api.feign.MovieDetailClient;
import com.ltw.cinema.api.feign.ScheduleClient;
import com.ltw.cinema.gui.CinemaGUIApplication;
import com.ltw.cinema.gui.desktop.gui.CasierGUI;
import javafx.util.Pair;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * @author uid22489
 */
@SuppressWarnings("serial")
public class CasierWorkPanel extends JPanel {
    public static ScheduleDto currentScheduleDto;
    public static List<MovieDto> currentMovieDtos;
    //<Row, Column>
    public static List<Pair<Integer, Integer>> selectedSpots = new ArrayList<>();


    /**
     * Creates new form TablePanel
     */
    public CasierWorkPanel() {
        initComponents();
        onLoad();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jSeparator1 = new javax.swing.JSeparator();
        fieldPanel = new javax.swing.JPanel();
        dataList = new javax.swing.JComboBox<>();
        filmList = new javax.swing.JComboBox<>();
        emailList = new javax.swing.JComboBox<>();
        numeFilmLabel = new javax.swing.JLabel();
        dataLabel = new javax.swing.JLabel();
        timeList = new javax.swing.JComboBox<>();
        oraLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        locuriPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();

        jScrollPane2.setViewportView(jTextPane1);

        setBackground(new java.awt.Color(244, 244, 244));

        fieldPanel.setBackground(new java.awt.Color(54, 33, 89));
        fieldPanel.setForeground(new java.awt.Color(255, 255, 255));

        dataList.setPreferredSize(new java.awt.Dimension(100, 20));
        dataList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dateListItemStateChanged(evt);
            }
        });

        filmList.setPreferredSize(new java.awt.Dimension(100, 20));
        filmList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filmListItemStateChanged(evt);
            }
        });

        emailList.setPreferredSize(new java.awt.Dimension(100, 20));
        emailList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                emailListItemStateChanged(evt);
            }
        });

        numeFilmLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        numeFilmLabel.setForeground(new java.awt.Color(255, 255, 255));
        numeFilmLabel.setText("Film");

        dataLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        dataLabel.setForeground(new java.awt.Color(255, 255, 255));
        dataLabel.setText("Data");

        timeList.setPreferredSize(new java.awt.Dimension(100, 20));
        timeList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                timeListItemStateChanged(evt);
            }
        });

        oraLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        oraLabel.setForeground(new java.awt.Color(255, 255, 255));
        oraLabel.setText("Ora");
        oraLabel.setAutoscrolls(true);

        emailLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        emailLabel.setForeground(new java.awt.Color(255, 255, 255));
        emailLabel.setText("Email");

        javax.swing.GroupLayout fieldPanelLayout = new javax.swing.GroupLayout(fieldPanel);
        fieldPanel.setLayout(fieldPanelLayout);
        fieldPanelLayout.setHorizontalGroup(
                fieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(fieldPanelLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(numeFilmLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(filmList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(dataLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dataList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(oraLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(timeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(emailLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(emailList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        fieldPanelLayout.setVerticalGroup(
                fieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(fieldPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(fieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(dataList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(filmList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(emailList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(numeFilmLabel)
                                        .addComponent(dataLabel)
                                        .addComponent(timeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(oraLabel)
                                        .addComponent(emailLabel))
                                .addContainerGap(16, Short.MAX_VALUE))
        );

        filmList.getAccessibleContext().setAccessibleName("");
        numeFilmLabel.getAccessibleContext().setAccessibleName("numeFilmLabel");
        dataLabel.getAccessibleContext().setAccessibleName("dataLabel");
        oraLabel.getAccessibleContext().setAccessibleName("oraLabel");
        emailLabel.getAccessibleContext().setAccessibleName("emailLabel");

        locuriPanel.setPreferredSize(new java.awt.Dimension(0, 300));
        locuriPanel.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout locuriPanelLayout = new javax.swing.GroupLayout(locuriPanel);
        locuriPanel.setLayout(locuriPanelLayout);
        locuriPanelLayout.setHorizontalGroup(
                locuriPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        locuriPanelLayout.setVerticalGroup(
                locuriPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 320, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 354, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 12, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(fieldPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(locuriPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING))
                                .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                                .addGap(170, 170, 170)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(fieldPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(locuriPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void filmListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filmListItemStateChanged
        //System.out.println("BAAAAA" + evt.getItem() + " " + evt.getStateChange());
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            int filmIndex = filmList.getSelectedIndex();
            Long movieId = currentMovieDtos.get(filmIndex).getId();

            dataList.removeAllItems();
            CinemaGUIApplication.getContext().getBean(ScheduleClient.class).getAll(CasierGUI.getToken())
                    .stream()
                    .filter(scheduleDto -> scheduleDto.getMovie().getId().equals(movieId))
                    .forEach(scheduleDto -> dataList.addItem(getDateAsString(scheduleDto.getStartingAt())));

            MovieDetailDto movieDetailDto = CinemaGUIApplication.getContext().getBean(MovieDetailClient.class).getByMovieId(movieId, CasierGUI.getToken());

            CasierMainPanel.numeFilmLabel.setText(movieDetailDto.getMovie().getName());
            CasierMainPanel.dataLansareLabel.setText("<html>Data lansare:<br> " + movieDetailDto.getLaunchDate() + "</html>");
            CasierMainPanel.tipFilmLabel.setText("<html>Genul filmului:<br>" + movieDetailDto.getMovieType() + "</html>");
            CasierMainPanel.detaliiFilmText.setText("Descriere:\n" + movieDetailDto.getDescription());
        }
    }//GEN-LAST:event_filmListItemStateChanged

    private String getDateAsString(LocalDateTime localDateTime) {
        return localDateTime.getDayOfMonth() + "/" + localDateTime.getMonth() + "/" + localDateTime.getYear();
    }

    private void dateListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dataListItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            int selectedMovieIndex = filmList.getSelectedIndex();
            Long movieId = currentMovieDtos.get(selectedMovieIndex).getId();
            String selectedDateValue = evt.getItem().toString();

            timeList.removeAllItems();

            CinemaGUIApplication.getContext().getBean(ScheduleClient.class).getAll(CasierGUI.getToken())
                    .stream()
                    .filter(scheduleDto -> scheduleDto.getMovie().getId().equals(movieId))
                    .filter(scheduleDto -> selectedDateValue.equals(getDateAsString(scheduleDto.getStartingAt())))
                    .forEach(scheduleDto -> timeList.addItem(getTimeAsString(scheduleDto.getStartingAt())));
        }
    }//GEN-LAST:event_dataListItemStateChanged

    private String getTimeAsString(LocalDateTime localDateTime) {
        return localDateTime.getHour() + ":" + localDateTime.getMinute();
    }

    private void timeListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_oraListItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            int movieIndex = filmList.getSelectedIndex();
            Long movieId = currentMovieDtos.get(movieIndex).getId();
            String selectedTime = evt.getItem().toString();
            String selectedData = dataList.getModel().getSelectedItem().toString();

            Optional<ScheduleDto> scheduleDto = CinemaGUIApplication.getContext().getBean(ScheduleClient.class).getAll(CasierGUI.getToken())
                    .stream()
                    .filter(e -> e.getMovie().getId().equals(movieId))
                    .filter(e -> selectedData.equals(getDateAsString(e.getStartingAt())))
                    .filter(e -> selectedTime.equals(getTimeAsString(e.getStartingAt())))
                    .findFirst();

            if (scheduleDto.isPresent()) {
                emailList.removeAllItems();
                emailList.addItem(" ");
                List<BookingDto> bookingDtos = CinemaGUIApplication.getContext().getBean(BookingClient.class).getByScheduleId(scheduleDto.get().getId(), CasierGUI.getToken());
                bookingDtos.stream()
                        .map(BookingDto::getEmail)
                        .filter(email -> !email.equals("default@cinema.ro"))
                        .distinct()
                        .forEach(email -> emailList.addItem(email));

                currentScheduleDto = scheduleDto.get();
            }
        }
    }//GEN-LAST:event_oraListItemStateChanged


    private void emailListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_emailListItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            populateSala(evt.getItem().toString());
        }

        if (emailList.getSelectedIndex() == 0 && selectedSpots.isEmpty()) {
            CasierMainPanel.cumparaButton.setEnabled(false);
        }
    }//GEN-LAST:event_emailListItemStateChanged

    public void populateSala(String email) {
        int movieIndex = filmList.getSelectedIndex();
        Long movieId = currentMovieDtos.get(movieIndex).getId();
        String selectedDate = dataList.getModel().getSelectedItem().toString();
        String selectedTime = timeList.getModel().getSelectedItem().toString();

        Optional<ScheduleDto> scheduleDto = CinemaGUIApplication.getContext().getBean(ScheduleClient.class).getAll(CasierGUI.getToken())
                .stream()
                .filter(e -> movieId.equals(e.getMovie().getId()))
                .filter(e -> selectedDate.equals(getDateAsString(e.getStartingAt())))
                .filter(e -> selectedTime.equals(getTimeAsString(e.getStartingAt())))
                .findFirst();

        if (!scheduleDto.isPresent()) {
            JOptionPane.showMessageDialog(this, "S-a produs o eroare. Vă rog reporniți aplicația!",
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            List<BookingDto> bookingDtos = CinemaGUIApplication.getContext().getBean(BookingClient.class).getByScheduleId(scheduleDto.get().getId(), CasierGUI.getToken());
            CasierSalaPanel salaPanel = new CasierSalaPanel();
            locuriPanel.removeAll();
            locuriPanel.setLayout(new BorderLayout());
            locuriPanel.add(salaPanel, BorderLayout.CENTER);
            salaPanel.drawPlaces(bookingDtos, scheduleDto.get().getRoom().getRoomType(), email);
            salaPanel.setVisible(true);
            locuriPanel.repaint();
        }
    }

    private void onLoad() {
        List<ScheduleDto> scheduleDtos = CinemaGUIApplication.getContext().getBean(ScheduleClient.class).getAll(CasierGUI.getToken());

        currentMovieDtos = scheduleDtos.stream()
                .map(ScheduleDto::getMovie)
                .distinct()
                .collect(Collectors.toList());
        currentMovieDtos
                .forEach(scheduleDto -> filmList.addItem(scheduleDto.getName()));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dataLabel;
    private javax.swing.JComboBox<String> dataList;
    private javax.swing.JLabel emailLabel;
    public static javax.swing.JComboBox<String> emailList;
    private javax.swing.JPanel fieldPanel;
    public static javax.swing.JComboBox<String> filmList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JPanel locuriPanel;
    private javax.swing.JLabel numeFilmLabel;
    private javax.swing.JLabel oraLabel;
    private javax.swing.JComboBox<String> timeList;
    // End of variables declaration//GEN-END:variables
}
