/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ltw.cinema.gui.casier;

import com.ltw.cinema.api.dto.BookingDto;
import com.ltw.cinema.api.feign.MovieClient;
import com.ltw.cinema.api.types.RoomType;
import com.ltw.cinema.gui.CinemaGUIApplication;
import javafx.util.Pair;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;

/**
 * @author Bakmy
 */
@SuppressWarnings("serial")
public class CasierSalaPanel extends JPanel {

    /**
     * Creates new form CasierSalaPanel
     */
    public CasierSalaPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    public void drawPlaces(List<BookingDto> bookingDtos, RoomType roomType, String selectedEmail) {
        CasierWorkPanel.selectedSpots.clear();

        int spatiuCuloar = 100;
        int spatiuPerete = 30;
        int spatiuColoana = 7;
        int spatiuRand = 4;
        int nrRanduri = 10;
        int nrColoane = 16;

        this.removeAll();

        if (roomType.equals(RoomType.SMALL)) {
            spatiuPerete = 100;
            nrColoane = 10;
        }

        for (BookingDto bookingDto : bookingDtos) {
            int row = bookingDto.getRow();
            String columns = bookingDto.getColumns();
            String email = bookingDto.getEmail();
            String[] columnsArr = columns.split(",");

            for (String c : columnsArr) {
                int column = Integer.parseInt(c);
                JLabel jl = new JLabel();
                jl.setForeground(Color.GREEN);
                jl.setBackground(Color.CYAN);
                jl.setName("rand:" + row + ":loc:" + column);
                if (column > (nrColoane / 2)) {
                    if (email.equals(selectedEmail)) {
                        formatPlaceLabel(jl, "yellow" + column);
                        CasierMainPanel.cumparaButton.setEnabled(true);
                        CasierWorkPanel.selectedSpots.add(new Pair<>(row, column));
                    } else {
                        formatPlaceLabel(jl, "gray" + column);
                    }

                    int x = (column - 1) * (25 + spatiuColoana) + spatiuPerete + spatiuCuloar;
                    int y = (row - 1) * (25 + spatiuRand) + 10;

                    jl.setBounds(x, y, 25, 25);
                    jl.setVisible(true);
                    this.add(jl);
                    //this.setVisible(true);
                    this.repaint();
                    this.revalidate();
                    if (getComponentAt(this, new Point(x, y)) != null) {
                        System.out.println("CEEEasdasd::: x:"+x + "  y:" +y);
                    }
                } else {
                    if (email.equals(selectedEmail)) {
                        formatPlaceLabel(jl, "yellow" + column);
                        CasierMainPanel.cumparaButton.setEnabled(true);
                        CasierWorkPanel.selectedSpots.add(new Pair<>(row, column));
                    } else {
                        formatPlaceLabel(jl, "gray" + column);
                    }

                    int x = (column - 1) * (25 + spatiuColoana) + spatiuPerete;
                    int y = (row - 1) * (25 + spatiuRand) + 10;

                    jl.setSize(jl.getPreferredSize());
                    jl.setLocation(x, y);
                    jl.setBounds(x, y, 25, 25);
                    jl.setVisible(true);
                    this.add(jl);
                    //this.setVisible(true);
                    this.repaint();
                    this.revalidate();
                    if (getComponentAt(this, new Point(x, y)) != null) {
                        System.out.println("CEEE::: x:"+x + "  y:" +y);
                    }

                }
            }
        }

        //this.setVisible(true);
        this.repaint();
        this.revalidate();

        //System.out.print("Component list: "+ this.countComponents());
        for (int i = 0; i < nrColoane; ++i) {
            for (int j = 0; j < nrRanduri; ++j) {
                JLabel jl = new JLabel();
                jl.setForeground(Color.GREEN);
                jl.setBackground(Color.CYAN);
                jl.setName("rand:" + (int) (j + 1) + ":loc:" + (int) (i + 1));
                if (i >= (nrColoane / 2)) {
                    int x = i * (25 + spatiuColoana) + spatiuPerete + spatiuCuloar;
                    int y = j * (25 + spatiuRand) + 10;
                    if (getComponentAt(this, new Point(x, y)) == null) {
                        formatPlaceLabel(jl, "green" + (int) (i + 1));
                        if (selectedEmail.equals(" ")) {
                            jl.addMouseListener(new MouseAdapter() {
                                @Override
                                public void mousePressed(MouseEvent e) {
                                    String nume = e.getComponent().getName();
                                    String[] strArray = nume.split(":");
                                    selectColumn(Integer.parseInt(strArray[1]), Integer.parseInt(strArray[3]), (JLabel) e.getComponent());
                                }
                            });
                        }

                        jl.setSize(jl.getPreferredSize());
                        jl.setLocation(x, y);
                        jl.setVisible(true);
                        jl.setBounds(x, y, 25, 25);
                        this.add(jl);
                        //this.setVisible(true);
                        this.repaint();
                        this.revalidate();
                    } else {
                        //System.out.println("debug");
                    }
                } else {
                    int x = i * (25 + spatiuColoana) + spatiuPerete;
                    int y = j * (25 + spatiuRand) + 10;
                    if (getComponentAt(this, new Point(x, y)) == null) {
                        formatPlaceLabel(jl, "green" + (int) (i + 1));
                        if (selectedEmail.equals(" ")) {
                            jl.addMouseListener(new MouseAdapter() {
                                @Override
                                public void mousePressed(MouseEvent e) {
                                    String nume = e.getComponent().getName();
                                    String[] strArray = nume.split(":");
                                    selectColumn(Integer.parseInt(strArray[1]), Integer.parseInt(strArray[3]), (JLabel) e.getComponent());
                                }
                            });
                        }

                        jl.setSize(jl.getPreferredSize());
                        jl.setLocation(x, y);
                        jl.setBounds(x, y, 25, 25);
                        jl.setVisible(true);
                        //this.setVisible(true);
                        this.add(jl);
                        this.repaint();
                        this.revalidate();
                    } else {
                        //System.out.println("debug");
                    }
                }
            }
        }

        //this.setVisible(true);
        this.repaint();
        this.revalidate();
    }

    private void selectColumn(int row, int column, JLabel label) {
        if (CasierWorkPanel.emailList.getModel().getSelectedItem().toString().equals(" ")) {
            int pos = -1;
            int i = -1;
            for (Pair<Integer, Integer> p : CasierWorkPanel.selectedSpots) {
                i++;
                if (p.getKey() == row && p.getValue() == column) {
                    pos = i;
                    break;
                }
            }

            if (pos != -1) {
                formatPlaceLabel(label, "green" + column);
                CasierWorkPanel.selectedSpots.remove(pos);
            } else {
                formatPlaceLabel(label, "yellow" + column);
                CasierWorkPanel.selectedSpots.add(new Pair<>(row, column));
            }
            if (!CasierWorkPanel.selectedSpots.isEmpty()) {
                CasierMainPanel.cumparaButton.setEnabled(true);
            } else {
                CasierMainPanel.cumparaButton.setEnabled(false);
            }
        }

        if (CasierWorkPanel.selectedSpots.isEmpty()) {
            CasierMainPanel.pretLabel.setText(" ");
        } else {
            int filmIndex = CasierWorkPanel.filmList.getSelectedIndex();
            Long filmID = CasierWorkPanel.currentMovieDtos.get(filmIndex).getId();
            int pret = CinemaGUIApplication.getContext().getBean(MovieClient.class).getById(filmID).getPrice();
            pret *= CasierWorkPanel.selectedSpots.size();
            CasierMainPanel.pretLabel.setText("PRET: " + pret + " LEI");
        }
    }

    private static Component getComponentAt(Container parent, Point p) {
        Component comp = null;
        for (Component child : parent.getComponents()) {
            if (child.getBounds().contains(p)) {
                comp = child;
            }
        }
        return comp;
    }

    private void formatPlaceLabel(JLabel jl, String numeIcon) {
        String path = "locuri/" + numeIcon + ".png";
        //System.out.println(path);
        ImageIcon imageIcon = new ImageIcon(path); // load the image to a imageIcon
        Image image = imageIcon.getImage(); // transform it
        imageIcon = new ImageIcon(image.getScaledInstance(25, 25, Image.SCALE_SMOOTH));  // scale it the smooth way
        //jl.setIcon(imageIcon);
        jl.setPreferredSize(new Dimension(25, 25));
        jl.setForeground(Color.GREEN);
        jl.setBackground(Color.CYAN);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
